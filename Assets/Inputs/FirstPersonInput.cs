//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/FirstPersonInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FirstPersonInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FirstPersonInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FirstPersonInput"",
    ""maps"": [
        {
            ""name"": ""First Person"",
            ""id"": ""279f4374-1bc0-4af3-b9bd-bb0a18d96e38"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d87b7e1d-abad-4923-b2f1-d4621f3eeae1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""45872e9f-6a4c-4817-97ce-b0e0ae4cbc89"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""d9d1801c-fd4a-45f9-bf16-950555a82a94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""65129afc-5668-47b0-b2cb-f403dd1dbcf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Value"",
                    ""id"": ""2f749419-340d-4ab1-8fa3-0d59d7270fb7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""9d7a9b8a-5eeb-4af2-adc5-383b7681046b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AltFire"",
                    ""type"": ""Button"",
                    ""id"": ""2d51a395-4fbf-4fdf-b7a9-bdb0446af322"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0af814bf-32b2-4d67-9ecc-2d2f53c7fac4"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""85474459-82ff-4cbc-ab50-fa6d957c0c7a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""172e9d81-33e6-4225-9ddc-410266c5789c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""12d8abd8-c5d4-4de3-9129-4531c7e8c8cd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""57f9f3e2-5410-49af-878e-c42bf308e7d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2df695f-615d-4d25-b44c-695d75a801ec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""babf2973-0df2-4437-998b-3cb5032b67d6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f2f8fe7-2947-492f-ab19-8bbe75f171d5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e786c8b-8393-42b9-b9a3-41dcf49f9aeb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""570ddb15-9e5a-4b63-a37f-bce9d1c611b6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0c2566e-c6d1-45d0-9838-227915514ebf"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""AltFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // First Person
        m_FirstPerson = asset.FindActionMap("First Person", throwIfNotFound: true);
        m_FirstPerson_Look = m_FirstPerson.FindAction("Look", throwIfNotFound: true);
        m_FirstPerson_Move = m_FirstPerson.FindAction("Move", throwIfNotFound: true);
        m_FirstPerson_Interact = m_FirstPerson.FindAction("Interact", throwIfNotFound: true);
        m_FirstPerson_Pause = m_FirstPerson.FindAction("Pause", throwIfNotFound: true);
        m_FirstPerson_Select = m_FirstPerson.FindAction("Select", throwIfNotFound: true);
        m_FirstPerson_Fire = m_FirstPerson.FindAction("Fire", throwIfNotFound: true);
        m_FirstPerson_AltFire = m_FirstPerson.FindAction("AltFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // First Person
    private readonly InputActionMap m_FirstPerson;
    private IFirstPersonActions m_FirstPersonActionsCallbackInterface;
    private readonly InputAction m_FirstPerson_Look;
    private readonly InputAction m_FirstPerson_Move;
    private readonly InputAction m_FirstPerson_Interact;
    private readonly InputAction m_FirstPerson_Pause;
    private readonly InputAction m_FirstPerson_Select;
    private readonly InputAction m_FirstPerson_Fire;
    private readonly InputAction m_FirstPerson_AltFire;
    public struct FirstPersonActions
    {
        private @FirstPersonInput m_Wrapper;
        public FirstPersonActions(@FirstPersonInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_FirstPerson_Look;
        public InputAction @Move => m_Wrapper.m_FirstPerson_Move;
        public InputAction @Interact => m_Wrapper.m_FirstPerson_Interact;
        public InputAction @Pause => m_Wrapper.m_FirstPerson_Pause;
        public InputAction @Select => m_Wrapper.m_FirstPerson_Select;
        public InputAction @Fire => m_Wrapper.m_FirstPerson_Fire;
        public InputAction @AltFire => m_Wrapper.m_FirstPerson_AltFire;
        public InputActionMap Get() { return m_Wrapper.m_FirstPerson; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonActions set) { return set.Get(); }
        public void SetCallbacks(IFirstPersonActions instance)
        {
            if (m_Wrapper.m_FirstPersonActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Move.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnInteract;
                @Pause.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnPause;
                @Select.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnSelect;
                @Fire.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnFire;
                @AltFire.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnAltFire;
                @AltFire.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnAltFire;
                @AltFire.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnAltFire;
            }
            m_Wrapper.m_FirstPersonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @AltFire.started += instance.OnAltFire;
                @AltFire.performed += instance.OnAltFire;
                @AltFire.canceled += instance.OnAltFire;
            }
        }
    }
    public FirstPersonActions @FirstPerson => new FirstPersonActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface IFirstPersonActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAltFire(InputAction.CallbackContext context);
    }
}
